apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"

    defaultConfig {
        applicationId "cc.makepower.cc_door_face"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "77c22cf22097b350bc40b5b4", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]

        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            abiFilters 'armeabi-v7a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
    }

    signingConfigs {
        debug {
            storeFile = file("../release.keystore")
            storePassword = "makepower1996"
            keyAlias = "debug"
            keyPassword = "cldz2016"
        }
        release {
            storeFile = file("../release.keystore")
            storePassword = "makepower1996"
            keyAlias = "release"
            keyPassword = "makepower1996"
        }
    }
    applicationVariants.all { variant ->//批量修改Apk名字
        variant.outputs.all { output ->
            //要被替换的源字符串
            def sourceFile = "app-${variant.buildType.name}"
            if (!variant.buildType.isDebuggable()) {
                //获取签名的名字 variant.signingConfig.name
                //替换的字符串
                def replaceFile = "人脸门禁_V${variant.versionName}_${variant.buildType.name}"
                outputFileName = output.outputFile.name.replace(sourceFile, replaceFile)
                //遗留问题：如何获取当前module的name，如CodeBooke这个名字怎么获取到
            } else {
                //替换的字符串
                def replaceFile = "人脸门禁_${variant.buildType.name}"
                outputFileName = output.outputFile.name.replace(sourceFile, replaceFile)
            }
        }
    }

    buildTypes {
        debug_Gate_East {
            resValue("string","deviceId","34295")
            resValue("string","deviceName","公司-东面大门")
            resValue("string","deviceBlueToothName","ZJTT-01-L17E")
//            resValue("string","deviceBlueToothName","ZJTT-01-L1D8")
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled true
//            shrinkResources true
            debuggable true
            signingConfig signingConfigs.debug
        }
        debug_Gate_West {
            resValue("string","deviceId","34289")
            resValue("string","deviceName","公司-西面大门")
            resValue("string","deviceBlueToothName","ZJTT-01-L7E6")
            versionNameSuffix "-debug"
            minifyEnabled false
            zipAlignEnabled true
//            shrinkResources true
            debuggable true
            signingConfig signingConfigs.debug
        }
        release_Gate_East {

            resValue("string","deviceId","34295")
            resValue("string","deviceName","公司-东面大门")
            resValue("string","deviceBlueToothName","ZJTT-01-L17E")
            minifyEnabled false//混淆编译
            zipAlignEnabled true
            //移除无用的资源文件
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release_Gate_West {
            resValue("string","deviceId","34289")
            resValue("string","deviceName","公司-西面大门")
            resValue("string","deviceBlueToothName","ZJTT-01-L7E6")
            minifyEnabled false//混淆编译
            zipAlignEnabled true
            //移除无用的资源文件
//            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.3'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.4'

    /*布局视图绑定组件*/
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'

    implementation 'com.github.bumptech.glide:glide:3.7.0'

    implementation 'cn.jiguang.sdk:jpush:3.1.8'  // 此处以JPush 3.1.6 版本为例。
    implementation 'cn.jiguang.sdk:jcore:1.2.6'  // 此处以JCore 1.2.5 版本为例。
    //eventbus
    implementation 'org.greenrobot:eventbus:3.0.0'
}
